;TESTING OPERATORS

;SET
SET [results + 0], 0x1234 ;test SET assert(r0 == 0x1234)

;ADD
;test ADD without overflow
ADD [results + 1], 15 ; assert(r1 == 15)
SET [results + 2], EX ; EX == 0

;test ADD with overflow
SET [results + 3], 0x1234
ADD [results + 3], 0xFFFF ; 1233
SET [results + 4], EX ; EX == 1

;SUB
;test SUB with underflow
SUB [results + 5], 0x1234 ; 0 - 1234  == EDCC
SET [results + 6], EX ; EX == FFFF

SET [results + 7], 0x1234
SUB [results + 7], 0xDEA ; 044A
SET [results + 8], EX ; EX == 0000

;MUL
SET [results + 9], 0x1234
MUL [results + 9], 2   ; 2468
SET [results + 10], EX ; EX==0x0

SET [results + 11], 0xFFFF
MUL [results + 11], 2; FFFE
SET [results + 12], EX ; EX == 1

;MLI
SET [results + 13], 0x1234
MLI [results + 13], -2 ; db98
SET [results + 14], EX ; EX == FFFF)

;DIV
SET [results + 15], 0x21 ; 33/2==16 rounding towards zero
DIV [results + 15], 2 ; 10
SET [results + 16], EX ; EX==8000

SET [results + 17], 0x1234 ; 0x1234/0==0, EX==0 division by zero
DIV [results + 17], 0 ; 0
SET [results + 18], EX ; EX==0

;DVI
SET [results + 19], 0x21 ; 33/-2 == -16
DVI [results + 19], 0xFFFE ; FFF0
SET [results + 20], EX ; 8000

;MOD
SET [results + 21], 15 ; 15 mod 10 == 5
MOD [results + 21], 10 ; 5

SET [results + 22], 15 ; 15 mod 0 == 0
MOD [results + 22], 0 ; 0

;MDI
SET [results + 23], -7 ; -7 mdi 16 == -7 (FFF9)
MDI [results + 23], 16 ; FFF9

SET [results + 24], -7 ; -7 mod 0 == 0
MDI [results + 24], 0 ; 0

;AND
SET [results + 25], 0xAAAA ; AAAA & 5555 == 0
AND [results + 25], 5555

;BOR
SET [results + 26], 0xAFFA ; AFFA | 5555 == FFFF
BOR [results + 26], 5555

;XOR
SET [results + 27], 0xAFFA ; AFFA ^ 5555 == FAAF
XOR [results + 27], 5555

;SHR
SET [results + 28], 0xAAAA ; 0xAAAA >>> 6 == 2AA
SHR [results + 28], 6
SET [results + 29], EX ; EX == A800

;ASR
SET [results + 30], 0xAAAA ; 0xAAAA >> 6 == FEAA
ASR [results + 30], 6
SET [results + 31], EX ; EX == A800

;SHL
SET [results + 32], 0xAAAA ; 0xAAAA << 6 == AA80
SHL [results + 32], 6
SET [results + 33], EX ; EX == 2A

;IFB
SET [results + 34], 1
IFB [results + 34], 1
	SET [results + 34], 0

;IFC
SET [results + 35], 1
IFC [results + 35], 2
	SET [results + 35], 0

;IFE
SET [results + 36], 1
IFE [results + 36], 1
	SET [results + 36], 0

;IFN
SET [results + 37], 1
IFN [results + 37], 2
	SET [results + 37], 0

;IFG
SET [results + 38], 1
IFG [results + 38], 0
	SET [results + 38], 0

;IFA
SET [results + 39], -1
IFA [results + 39], -2
	SET [results + 39], 0

;IFL
SET [results + 40], 1
IFL [results + 40], 2
	SET [results + 40], 0

;IFU
SET [results + 41], -1
IFU [results + 41], 0
	SET [results + 41], 0

;ADX
SET [results + 42], 1
SET B, 2
SET EX, 3
ADX [results + 42], B ; 6
SET [results + 43], EX ; 0

SET [results + 44], 0xFFFF
SET B, 0xFFFF
SET EX, 0xFFFF
ADX [results + 44], B ; 0xFFFD
SET [results + 45], EX ; 1

;SBX
SET [results + 46], 10
SET B, 5
SET EX, 3
SBX [results + 46], B ; 10-5+3 == 8
SET [results + 47], EX ; 0

SET [results + 48], 0
SET B, 0xFFFF
SET EX, 0
SBX [results + 48], B ; 0-ffff+0 == 1 underflow
SET [results + 49], EX ; 0xFFFF

SET [results + 50], 0xFFFF
SET B, 0
SET EX, 0xFFFF
SBX [results + 50], B ; 0xFFFF-0+0xFFFF == FFFE overflow
SET [results + 51], EX ; 0x0001

;STI
SET I, 0
SET J, 2
STI I, J
SET [results + 52], I ; 3
SET [results + 53], J ; 3

;STD
SET I, 0
SET J, 2
STD I, J
SET [results + 54], I ; 1
SET [results + 55], J ; 1

:crash
SET PC, crash

; Makes line in memory dump
DAT 0xAAAA, 0xAAAA, 0xAAAA, 0xAAAA, 0xAAAA, 0xAAAA, 0xAAAA, 0xAAAA

:results

DAT 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DAT 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

DAT 0xAAAA, 0xAAAA, 0xAAAA, 0xAAAA, 0xAAAA, 0xAAAA, 0xAAAA, 0xAAAA